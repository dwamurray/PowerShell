#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 97f0343b-2da0-4a16-9bc1-c88987f99cc0
# Source File: C:\Users\Jeff\Dropbox\PowerShell In Depth 2nd\Chapter 38\Ch38Demo.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
WhAAAB+LCAAAAAAABADNmFtv2jAUx98n7TtYeUaQCylUgkgQijSNbl1h3d4qJzmhXp0Y2U7b7NPP
udC1pCwJKmhCQtic4/+5/HwiGF2Dzx6ApzMsMVIfBGHxWDM15+MHhEZfOVmTGNM5ofAFR+C4d9Zw
BhHrbkQ46lW+Lpy8X+BLJNMNjLVlKiRE3R8kDtij6M4Zj4r3Dnrrqw66KWPod/Xs1UFuQmXCYRxD
IjmmHXSVeJT4nyFdsXuIx95ggG3fPjPOrT7ow3MNxSqUsRaq874lKrWLB4il0JB/R2jAlYfmslhy
RkWRpQr5irMNcJmWrhPfh42cJlKyeGujrK4hBOXvQ2nm5QYzIjYUpxrqbU/rbY/bc7yL1Rm04fEu
ZQLaHE6JSndJfoPm9I1hBxm6Ve9UFGTKnjRnjqmAWo+sW1PGA+BLmVKlNSdPEMwIpmxd65yxojk7
Dar1WkrM5RUTRJKsbq5yUuo+B4hrfVfwJDUnV0P75PL90n7BcFCJ8DbbHfXyxdapHvaiz0fH/RUt
+1Gvlqbo2TUIJayqmrNZKU7VbcF8XDTCMo0OsvUGPkXfX0TawKcgeWB3kFnl+I1GY+9THIDiuJF1
jkXTUL4LuCEiwTRHfor9e5dRxjVnxZM3bkyvYOM/JeV5bJ2UFdMcHsBKGesxaTEb09I8mHa87Ewg
Ncf9+50C3OabOxOoNWYuizymRv3RQcuF8lgXbL0gQraETS1n7DEuHzDbZXZQg+JnyWApSby+iLFH
Idhf9r20Gn1TPT/7jWmtJNyYWNPuK2SNVshWrduzsMAe0KODQDMVVZIVO2jqvBwfqh9NLnbRj4pu
434Yut56hDSZasUIUSEhyVDzoDK3CSVrVYJLEgQUFhBW4XrV/teLiRAQqV6B2NqWO6lT9v4Sx3gN
kWK3O0kki/KK/2XAaMqAZXihNbTPcGCd9cGyR71npV3lSPiMU+K9A2n/UCnyO4XGu9+fesXsZ9tp
hDh+VLP0EC3dCu1wEBpGYOvYwvVaPyN6mpwIVxeE8XQJ/IH4cFDLWmfnMg4nSa/MSg0JldoRcnte
FlNl1Hv5X4LzBxptjfRaEAAA#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.36
# Generated On: 2/17/2014 4:49 PM
# Generated By: Jeff Hicks
#========================================================================
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Ch38Demo_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formQueryEvents = New-Object 'System.Windows.Forms.Form'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$buttonDisplay = New-Object 'System.Windows.Forms.Button'
	$ComboEventLogList = New-Object 'System.Windows.Forms.ComboBox'
	$labelLogToDisplay = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	
	$formQueryEvents_Load={
		#TODO: Initialize Form Controls here
	    Load-ComboBox -ComboBox $comboEventLogList -Items (
		Get-EventLog -list | Select-Object -expandProperty Log
		)
	
	}
	
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$buttonDisplay_Click={
		#TODO: Place custom script here
		    Get-EventLog -LogName ($comboEventLogList.SelectedItem) |
	    Out-GridView
	
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formQueryEvents.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDisplay.remove_Click($buttonDisplay_Click)
			$formQueryEvents.remove_Load($formQueryEvents_Load)
			$formQueryEvents.remove_Load($Form_StateCorrection_Load)
			$formQueryEvents.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formQueryEvents.SuspendLayout()
	#
	# formQueryEvents
	#
	$formQueryEvents.Controls.Add($buttonClose)
	$formQueryEvents.Controls.Add($buttonDisplay)
	$formQueryEvents.Controls.Add($ComboEventLogList)
	$formQueryEvents.Controls.Add($labelLogToDisplay)
	$formQueryEvents.AcceptButton = $buttonDisplay
	$formQueryEvents.CancelButton = $buttonClose
	$formQueryEvents.ClientSize = '418, 103'
	$formQueryEvents.ControlBox = $False
	$formQueryEvents.FormBorderStyle = 'FixedDialog'
	$formQueryEvents.Name = "formQueryEvents"
	$formQueryEvents.StartPosition = 'CenterScreen'
	$formQueryEvents.Text = "Query Events"
	$formQueryEvents.add_Load($formQueryEvents_Load)
	#
	# buttonClose
	#
	$buttonClose.DialogResult = 'Cancel'
	$buttonClose.Location = '321, 50'
	$buttonClose.Name = "buttonClose"
	$buttonClose.Size = '75, 23'
	$buttonClose.TabIndex = 3
	$buttonClose.Text = "Close"
	$buttonClose.UseVisualStyleBackColor = $True
	#
	# buttonDisplay
	#
	$buttonDisplay.DialogResult = 'Cancel'
	$buttonDisplay.Location = '228, 50'
	$buttonDisplay.Name = "buttonDisplay"
	$buttonDisplay.Size = '75, 23'
	$buttonDisplay.TabIndex = 2
	$buttonDisplay.Text = "Display"
	$buttonDisplay.UseVisualStyleBackColor = $True
	$buttonDisplay.add_Click($buttonDisplay_Click)
	#
	# ComboEventLogList
	#
	$ComboEventLogList.DropDownStyle = 'DropDownList'
	$ComboEventLogList.FormattingEnabled = $True
	$ComboEventLogList.Location = '142, 14'
	$ComboEventLogList.Name = "ComboEventLogList"
	$ComboEventLogList.Size = '254, 21'
	$ComboEventLogList.TabIndex = 1
	#
	# labelLogToDisplay
	#
	$labelLogToDisplay.Location = '22, 13'
	$labelLogToDisplay.Name = "labelLogToDisplay"
	$labelLogToDisplay.Size = '100, 23'
	$labelLogToDisplay.TabIndex = 0
	$labelLogToDisplay.Text = "Log to Display"
	$labelLogToDisplay.TextAlign = 'MiddleLeft'
	$formQueryEvents.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formQueryEvents.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formQueryEvents.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formQueryEvents.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formQueryEvents.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-Ch38Demo_psf | Out-Null
	#Perform cleanup
	OnApplicationExit
}
